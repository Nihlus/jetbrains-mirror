// <auto-generated />
#pragma warning disable CS1591
// ReSharper disable RedundantArgumentDefaultValue
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantUsingDirective
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore.Migrations;

namespace JetBrains.Plugins.Models.Migrations
{
    public partial class InitialCreate : Migration
    {
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "Categories",
                columns: table => new
                {
                    ID = table.Column<decimal>(nullable: false),
                    Name = table.Column<string>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Categories", x => x.ID);
                });

            migrationBuilder.CreateTable(
                name: "Vendor",
                columns: table => new
                {
                    ID = table.Column<decimal>(nullable: false),
                    Name = table.Column<string>(nullable: true),
                    URL = table.Column<string>(nullable: true),
                    Email = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Vendor", x => x.ID);
                });

            migrationBuilder.CreateTable(
                name: "Plugins",
                columns: table => new
                {
                    ID = table.Column<decimal>(nullable: false),
                    Name = table.Column<string>(nullable: false),
                    CategoryID = table.Column<decimal>(nullable: false),
                    PluginID = table.Column<string>(nullable: false),
                    Description = table.Column<string>(nullable: false),
                    VendorID = table.Column<decimal>(nullable: false),
                    Tags = table.Column<List<string>>(nullable: false),
                    Rating = table.Column<double>(nullable: false),
                    ProjectURL = table.Column<string>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Plugins", x => x.ID);
                    table.ForeignKey(
                        name: "FK_Plugins_Categories_CategoryID",
                        column: x => x.CategoryID,
                        principalTable: "Categories",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Plugins_Vendor_VendorID",
                        column: x => x.VendorID,
                        principalTable: "Vendor",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "PluginRelease",
                columns: table => new
                {
                    ID = table.Column<decimal>(nullable: false),
                    PluginID = table.Column<decimal>(nullable: false),
                    ChangeNotes = table.Column<string>(nullable: false),
                    Downloads = table.Column<decimal>(nullable: false),
                    Size = table.Column<decimal>(nullable: false),
                    UploadedAt = table.Column<DateTime>(nullable: false),
                    Hash = table.Column<string>(nullable: false),
                    Version_Major = table.Column<int>(nullable: false),
                    Version_Minor = table.Column<int>(nullable: false),
                    Version_Patch = table.Column<int>(nullable: false),
                    Version_Extra = table.Column<string>(nullable: true),
                    CompatibleWith_SinceBuild_ProductID = table.Column<string>(nullable: false),
                    CompatibleWith_SinceBuild_Branch = table.Column<int>(nullable: false),
                    CompatibleWith_SinceBuild_Build = table.Column<int>(nullable: true),
                    CompatibleWith_SinceBuild_Extra = table.Column<List<int>>(nullable: true),
                    CompatibleWith_UntilBuild_ProductID = table.Column<string>(nullable: false),
                    CompatibleWith_UntilBuild_Branch = table.Column<int>(nullable: false),
                    CompatibleWith_UntilBuild_Build = table.Column<int>(nullable: true),
                    CompatibleWith_UntilBuild_Extra = table.Column<List<int>>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PluginRelease", x => x.ID);
                    table.ForeignKey(
                        name: "FK_PluginRelease_Plugins_PluginID",
                        column: x => x.PluginID,
                        principalTable: "Plugins",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "PluginDependency",
                columns: table => new
                {
                    ID = table.Column<decimal>(nullable: false),
                    DependerID = table.Column<decimal>(nullable: true),
                    DependencyID = table.Column<decimal>(nullable: true),
                    PluginReleaseID = table.Column<decimal>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PluginDependency", x => x.ID);
                    table.ForeignKey(
                        name: "FK_PluginDependency_Plugins_DependencyID",
                        column: x => x.DependencyID,
                        principalTable: "Plugins",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PluginDependency_Plugins_DependerID",
                        column: x => x.DependerID,
                        principalTable: "Plugins",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PluginDependency_PluginRelease_PluginReleaseID",
                        column: x => x.PluginReleaseID,
                        principalTable: "PluginRelease",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateIndex(
                name: "IX_PluginDependency_DependencyID",
                table: "PluginDependency",
                column: "DependencyID");

            migrationBuilder.CreateIndex(
                name: "IX_PluginDependency_DependerID",
                table: "PluginDependency",
                column: "DependerID");

            migrationBuilder.CreateIndex(
                name: "IX_PluginDependency_PluginReleaseID",
                table: "PluginDependency",
                column: "PluginReleaseID");

            migrationBuilder.CreateIndex(
                name: "IX_PluginRelease_PluginID",
                table: "PluginRelease",
                column: "PluginID");

            migrationBuilder.CreateIndex(
                name: "IX_Plugins_CategoryID",
                table: "Plugins",
                column: "CategoryID");

            migrationBuilder.CreateIndex(
                name: "IX_Plugins_VendorID",
                table: "Plugins",
                column: "VendorID");
        }

        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "PluginDependency");

            migrationBuilder.DropTable(
                name: "PluginRelease");

            migrationBuilder.DropTable(
                name: "Plugins");

            migrationBuilder.DropTable(
                name: "Categories");

            migrationBuilder.DropTable(
                name: "Vendor");
        }
    }
}
